// Code generated by mockery. DO NOT EDIT.

package cmd

import mock "github.com/stretchr/testify/mock"

// MockExecer is an autogenerated mock type for the Execer type
type MockExecer struct {
	mock.Mock
}

type MockExecer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecer) EXPECT() *MockExecer_Expecter {
	return &MockExecer_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: cmd, args
func (_m *MockExecer) Exec(cmd string, args ...string) (*Result, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cmd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (*Result, error)); ok {
		return rf(cmd, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) *Result); ok {
		r0 = rf(cmd, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(cmd, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecer_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockExecer_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - cmd string
//   - args ...string
func (_e *MockExecer_Expecter) Exec(cmd interface{}, args ...interface{}) *MockExecer_Exec_Call {
	return &MockExecer_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{cmd}, args...)...)}
}

func (_c *MockExecer_Exec_Call) Run(run func(cmd string, args ...string)) *MockExecer_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockExecer_Exec_Call) Return(_a0 *Result, _a1 error) *MockExecer_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecer_Exec_Call) RunAndReturn(run func(string, ...string) (*Result, error)) *MockExecer_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecer creates a new instance of MockExecer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecer {
	mock := &MockExecer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
